
F103C8_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002494  08002494  00012494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c0  080024c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024c0  080024c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c0  080024c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080024d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080024d4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b89  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000131b  00000000  00000000  00026bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  00027ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00028600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000164d3  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000060ae  00000000  00000000  0003f173  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ebf4  00000000  00000000  00045221  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000c3e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800247c 	.word	0x0800247c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800247c 	.word	0x0800247c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fae1 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f84d 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8c7 	bl	80002ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f88f 	bl	8000280 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //mpu6050_begin();
  mpu6050_init();
 8000162:	f000 f9f5 	bl	8000550 <mpu6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //data = mpu6050_read(MPU_REG_ACCEL_XOUT_L);
	  buffer[0] = MPU_REG_WHO_AM_I;
 8000166:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <main+0x98>)
 8000168:	2275      	movs	r2, #117	; 0x75
 800016a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2301      	movs	r3, #1
 8000174:	4a1b      	ldr	r2, [pc, #108]	; (80001e4 <main+0x98>)
 8000176:	21d0      	movs	r1, #208	; 0xd0
 8000178:	481b      	ldr	r0, [pc, #108]	; (80001e8 <main+0x9c>)
 800017a:	f000 fec7 	bl	8000f0c <HAL_I2C_Master_Transmit>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0xa0>)
 8000184:	701a      	strb	r2, [r3, #0]
	  if(ret == HAL_OK) {
 8000186:	4b19      	ldr	r3, [pc, #100]	; (80001ec <main+0xa0>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10c      	bne.n	80001a8 <main+0x5c>
		  ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800018e:	f04f 33ff 	mov.w	r3, #4294967295
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	4a13      	ldr	r2, [pc, #76]	; (80001e4 <main+0x98>)
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4813      	ldr	r0, [pc, #76]	; (80001e8 <main+0x9c>)
 800019c:	f000 ffb4 	bl	8001108 <HAL_I2C_Master_Receive>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <main+0xa0>)
 80001a6:	701a      	strb	r2, [r3, #0]
	  }
	  data = buffer[0];
 80001a8:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <main+0x98>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	b25a      	sxtb	r2, r3
 80001ae:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <main+0xa4>)
 80001b0:	701a      	strb	r2, [r3, #0]
	  x_axis = (int16_t)(buffer[0] << 8) | buffer[1];
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <main+0x98>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	021b      	lsls	r3, r3, #8
 80001b8:	b21a      	sxth	r2, r3
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <main+0x98>)
 80001bc:	785b      	ldrb	r3, [r3, #1]
 80001be:	b21b      	sxth	r3, r3
 80001c0:	4313      	orrs	r3, r2
 80001c2:	80fb      	strh	r3, [r7, #6]
	  //Convert to 2's complement, since acceleration can be negative
	  if(x_axis > 0x7FF) {
 80001c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80001c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001cc:	db05      	blt.n	80001da <main+0x8e>
		  x_axis |= 0xF000;
 80001ce:	88fb      	ldrh	r3, [r7, #6]
 80001d0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80001d4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80001d8:	80fb      	strh	r3, [r7, #6]
	  }
	  HAL_Delay(500);
 80001da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001de:	f000 fafd 	bl	80007dc <HAL_Delay>
	  buffer[0] = MPU_REG_WHO_AM_I;
 80001e2:	e7c0      	b.n	8000166 <main+0x1a>
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	20000028 	.word	0x20000028
 80001ec:	2000007f 	.word	0x2000007f
 80001f0:	2000007e 	.word	0x2000007e

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 f932 	bl	800246c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fce9 	bl	8001c14 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f87e 	bl	8000348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 ff54 	bl	8002114 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f869 	bl	8000348 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_I2C1_Init+0x60>)
 8000286:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <MX_I2C1_Init+0x64>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_I2C1_Init+0x60>)
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <MX_I2C1_Init+0x68>)
 800028e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <MX_I2C1_Init+0x60>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x60>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_I2C1_Init+0x60>)
 800029e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002be:	f000 fced 	bl	8000c9c <HAL_I2C_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f83e 	bl	8000348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  hi2c1.Instance->CR1 |= I2C_PERIPH_ENABLE;   //Enabling I2C peripheral
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <MX_I2C1_Init+0x60>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f042 0201 	orr.w	r2, r2, #1
 80002da:	601a      	str	r2, [r3, #0]
  //hi2c1.Instance->CR1 |= I2C_ACK_ENABLE;	//Enabling ACK

  /* USER CODE END I2C1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40005400 	.word	0x40005400
 80002e8:	000186a0 	.word	0x000186a0

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_GPIO_Init+0x58>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <MX_GPIO_Init+0x58>)
 80002f8:	f043 0320 	orr.w	r3, r3, #32
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_GPIO_Init+0x58>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0320 	and.w	r3, r3, #32
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_GPIO_Init+0x58>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <MX_GPIO_Init+0x58>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_GPIO_Init+0x58>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_GPIO_Init+0x58>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <MX_GPIO_Init+0x58>)
 8000328:	f043 0308 	orr.w	r3, r3, #8
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <MX_GPIO_Init+0x58>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0308 	and.w	r3, r3, #8
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034e:	e7fe      	b.n	800034e <Error_Handler+0x6>

08000350 <mpu6050_config_clock_source>:
//}



_Bool mpu6050_config_clock_source(uint8_t clk_src)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af02      	add	r7, sp, #8
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	_Bool status = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	73fb      	strb	r3, [r7, #15]
	buffer[0] = MPU_REG_PWR_MGMT_1;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <mpu6050_config_clock_source+0x74>)
 8000360:	226b      	movs	r2, #107	; 0x6b
 8000362:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2301      	movs	r3, #1
 800036c:	4a15      	ldr	r2, [pc, #84]	; (80003c4 <mpu6050_config_clock_source+0x74>)
 800036e:	21d0      	movs	r1, #208	; 0xd0
 8000370:	4815      	ldr	r0, [pc, #84]	; (80003c8 <mpu6050_config_clock_source+0x78>)
 8000372:	f000 fdcb 	bl	8000f0c <HAL_I2C_Master_Transmit>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <mpu6050_config_clock_source+0x7c>)
 800037c:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK) {
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <mpu6050_config_clock_source+0x7c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d118      	bne.n	80003b8 <mpu6050_config_clock_source+0x68>
		buffer[0] = clk_src; //0x01
 8000386:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <mpu6050_config_clock_source+0x74>)
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	7013      	strb	r3, [r2, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2301      	movs	r3, #1
 8000394:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <mpu6050_config_clock_source+0x74>)
 8000396:	21d0      	movs	r1, #208	; 0xd0
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <mpu6050_config_clock_source+0x78>)
 800039a:	f000 fdb7 	bl	8000f0c <HAL_I2C_Master_Transmit>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <mpu6050_config_clock_source+0x7c>)
 80003a4:	701a      	strb	r2, [r3, #0]
		if(ret == HAL_OK) {
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <mpu6050_config_clock_source+0x7c>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d102      	bne.n	80003b4 <mpu6050_config_clock_source+0x64>
			status = 1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	e001      	b.n	80003b8 <mpu6050_config_clock_source+0x68>
		}
		else
			status = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000007c 	.word	0x2000007c
 80003c8:	20000028 	.word	0x20000028
 80003cc:	2000007f 	.word	0x2000007f

080003d0 <mpu6050_config_gyro_scale>:
//	mpu6050_write(MPU_REG_GYRO_CONFIG, scale);
//}


_Bool mpu6050_config_gyro_scale(uint8_t scale)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af02      	add	r7, sp, #8
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	_Bool status = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	73fb      	strb	r3, [r7, #15]
	buffer[0] = MPU_REG_GYRO_CONFIG;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <mpu6050_config_gyro_scale+0x74>)
 80003e0:	221b      	movs	r2, #27
 80003e2:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2301      	movs	r3, #1
 80003ec:	4a15      	ldr	r2, [pc, #84]	; (8000444 <mpu6050_config_gyro_scale+0x74>)
 80003ee:	21d0      	movs	r1, #208	; 0xd0
 80003f0:	4815      	ldr	r0, [pc, #84]	; (8000448 <mpu6050_config_gyro_scale+0x78>)
 80003f2:	f000 fd8b 	bl	8000f0c <HAL_I2C_Master_Transmit>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <mpu6050_config_gyro_scale+0x7c>)
 80003fc:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK) {
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <mpu6050_config_gyro_scale+0x7c>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d118      	bne.n	8000438 <mpu6050_config_gyro_scale+0x68>
		buffer[0] = scale; //0x18
 8000406:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <mpu6050_config_gyro_scale+0x74>)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	7013      	strb	r3, [r2, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800040c:	f04f 33ff 	mov.w	r3, #4294967295
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2301      	movs	r3, #1
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <mpu6050_config_gyro_scale+0x74>)
 8000416:	21d0      	movs	r1, #208	; 0xd0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <mpu6050_config_gyro_scale+0x78>)
 800041a:	f000 fd77 	bl	8000f0c <HAL_I2C_Master_Transmit>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <mpu6050_config_gyro_scale+0x7c>)
 8000424:	701a      	strb	r2, [r3, #0]
		if(ret == HAL_OK) {
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <mpu6050_config_gyro_scale+0x7c>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d102      	bne.n	8000434 <mpu6050_config_gyro_scale+0x64>
			status = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	73fb      	strb	r3, [r7, #15]
 8000432:	e001      	b.n	8000438 <mpu6050_config_gyro_scale+0x68>
		}
		else
			status = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000438:	7bfb      	ldrb	r3, [r7, #15]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000007c 	.word	0x2000007c
 8000448:	20000028 	.word	0x20000028
 800044c:	2000007f 	.word	0x2000007f

08000450 <mpu6050_config_accel_scale>:
//	mpu6050_write(MPU_REG_ACCEL_CONFIG, scale);
//}


_Bool mpu6050_config_accel_scale(uint8_t scale)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af02      	add	r7, sp, #8
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	_Bool status = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	73fb      	strb	r3, [r7, #15]
	buffer[0] = MPU_REG_ACCEL_CONFIG;
 800045e:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <mpu6050_config_accel_scale+0x74>)
 8000460:	221c      	movs	r2, #28
 8000462:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 8000464:	f04f 33ff 	mov.w	r3, #4294967295
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2301      	movs	r3, #1
 800046c:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <mpu6050_config_accel_scale+0x74>)
 800046e:	21d0      	movs	r1, #208	; 0xd0
 8000470:	4815      	ldr	r0, [pc, #84]	; (80004c8 <mpu6050_config_accel_scale+0x78>)
 8000472:	f000 fd4b 	bl	8000f0c <HAL_I2C_Master_Transmit>
 8000476:	4603      	mov	r3, r0
 8000478:	461a      	mov	r2, r3
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <mpu6050_config_accel_scale+0x7c>)
 800047c:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK) {
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <mpu6050_config_accel_scale+0x7c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d118      	bne.n	80004b8 <mpu6050_config_accel_scale+0x68>
		buffer[0] = scale; //0x00 -> 2g
 8000486:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <mpu6050_config_accel_scale+0x74>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	7013      	strb	r3, [r2, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <mpu6050_config_accel_scale+0x74>)
 8000496:	21d0      	movs	r1, #208	; 0xd0
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <mpu6050_config_accel_scale+0x78>)
 800049a:	f000 fd37 	bl	8000f0c <HAL_I2C_Master_Transmit>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <mpu6050_config_accel_scale+0x7c>)
 80004a4:	701a      	strb	r2, [r3, #0]
		if(ret == HAL_OK) {
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <mpu6050_config_accel_scale+0x7c>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d102      	bne.n	80004b4 <mpu6050_config_accel_scale+0x64>
			status = 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e001      	b.n	80004b8 <mpu6050_config_accel_scale+0x68>
		}
		else
			status = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000007c 	.word	0x2000007c
 80004c8:	20000028 	.word	0x20000028
 80004cc:	2000007f 	.word	0x2000007f

080004d0 <mpu6050_config_dlpf>:
//	mpu6050_write(MPU_REG_CONFIG, bandwidth);
//}


_Bool mpu6050_config_dlpf(uint8_t bandwidth)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	_Bool status = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
	buffer[0] = MPU_REG_CONFIG;
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <mpu6050_config_dlpf+0x74>)
 80004e0:	221a      	movs	r2, #26
 80004e2:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <mpu6050_config_dlpf+0x74>)
 80004ee:	21d0      	movs	r1, #208	; 0xd0
 80004f0:	4815      	ldr	r0, [pc, #84]	; (8000548 <mpu6050_config_dlpf+0x78>)
 80004f2:	f000 fd0b 	bl	8000f0c <HAL_I2C_Master_Transmit>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <mpu6050_config_dlpf+0x7c>)
 80004fc:	701a      	strb	r2, [r3, #0]
	if(ret == HAL_OK) {
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <mpu6050_config_dlpf+0x7c>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d118      	bne.n	8000538 <mpu6050_config_dlpf+0x68>
		buffer[0] = bandwidth;
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <mpu6050_config_dlpf+0x74>)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	7013      	strb	r3, [r2, #0]
		ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADD_8BIT, buffer, 1, HAL_MAX_DELAY);
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <mpu6050_config_dlpf+0x74>)
 8000516:	21d0      	movs	r1, #208	; 0xd0
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <mpu6050_config_dlpf+0x78>)
 800051a:	f000 fcf7 	bl	8000f0c <HAL_I2C_Master_Transmit>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <mpu6050_config_dlpf+0x7c>)
 8000524:	701a      	strb	r2, [r3, #0]
		if(ret == HAL_OK) {
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <mpu6050_config_dlpf+0x7c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <mpu6050_config_dlpf+0x64>
			status = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	e001      	b.n	8000538 <mpu6050_config_dlpf+0x68>
		}
		else
			status = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000007c 	.word	0x2000007c
 8000548:	20000028 	.word	0x20000028
 800054c:	2000007f 	.word	0x2000007f

08000550 <mpu6050_init>:



void mpu6050_init()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_Delay(100);	//power-up delay
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f000 f941 	bl	80007dc <HAL_Delay>
	//mpu6050_config_sample_rate(0x07);	//sample rate = 125 Hz
	mpu6050_config_clock_source(0x00);	//auto selects the best available clock source - PLL if ready
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff fef8 	bl	8000350 <mpu6050_config_clock_source>
	HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 f93b 	bl	80007dc <HAL_Delay>
	mpu6050_config_dlpf(MPU6050_BANDWIDTH_260_HZ);	//bandwidth = 260 Hz
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffb2 	bl	80004d0 <mpu6050_config_dlpf>
	HAL_Delay(10);
 800056c:	200a      	movs	r0, #10
 800056e:	f000 f935 	bl	80007dc <HAL_Delay>
	mpu6050_config_accel_scale(MPU6050_ACCEL_SCALE_2G);	//scale = 2g
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff6c 	bl	8000450 <mpu6050_config_accel_scale>
	HAL_Delay(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f000 f92f 	bl	80007dc <HAL_Delay>
	mpu6050_config_gyro_scale(MPU6050_GYRO_SCALE_2000DPS << 3);	//scale = 2000°/s
 800057e:	2018      	movs	r0, #24
 8000580:	f7ff ff26 	bl	80003d0 <mpu6050_config_gyro_scale>
	HAL_Delay(10);
 8000584:	200a      	movs	r0, #10
 8000586:	f000 f929 	bl	80007dc <HAL_Delay>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_MspInit+0x5c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_MspInit+0x5c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x5c>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x5c>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_MspInit+0x60>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_MspInit+0x60>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010000 	.word	0x40010000

080005f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <HAL_I2C_MspInit+0x70>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d123      	bne.n	800065c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_I2C_MspInit+0x74>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <HAL_I2C_MspInit+0x74>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_I2C_MspInit+0x74>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800062c:	23c0      	movs	r3, #192	; 0xc0
 800062e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000630:	2312      	movs	r3, #18
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <HAL_I2C_MspInit+0x78>)
 8000640:	f000 f9d2 	bl	80009e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_I2C_MspInit+0x74>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_I2C_MspInit+0x74>)
 800064a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800064e:	61d3      	str	r3, [r2, #28]
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_I2C_MspInit+0x74>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	40010c00 	.word	0x40010c00

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b6:	f000 f875 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ce:	e003      	b.n	80006d8 <LoopCopyDataInit>

080006d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d6:	3104      	adds	r1, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006e0:	d3f6      	bcc.n	80006d0 <CopyDataInit>
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e4:	e002      	b.n	80006ec <LoopFillZerobss>

080006e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e8:	f842 3b04 	str.w	r3, [r2], #4

080006ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006f0:	d3f9      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffe4 	bl	80006be <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f001 fe95 	bl	8002424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fd27 	bl	800014c <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000700:	080024c8 	.word	0x080024c8
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000710:	20000084 	.word	0x20000084

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f929 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff ff2c 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f933 	bl	80009ce <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f909 	bl	8000996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000080 	.word	0x20000080

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000080 	.word	0x20000080

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff fff0 	bl	80007c8 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_Delay+0x40>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffe0 	bl	80007c8 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000008 	.word	0x20000008

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	210f      	movs	r1, #15
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff90 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff49 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a8:	f7ff ff5e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6978      	ldr	r0, [r7, #20]
 80009b4:	f7ff ff90 	bl	80008d8 <NVIC_EncodePriority>
 80009b8:	4602      	mov	r2, r0
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff5f 	bl	8000884 <__NVIC_SetPriority>
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffb0 	bl	800093c <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b08b      	sub	sp, #44	; 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fa:	e127      	b.n	8000c4c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009fc:	2201      	movs	r2, #1
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 8116 	bne.w	8000c46 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d034      	beq.n	8000a8c <HAL_GPIO_Init+0xa4>
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d80d      	bhi.n	8000a42 <HAL_GPIO_Init+0x5a>
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d02b      	beq.n	8000a82 <HAL_GPIO_Init+0x9a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d804      	bhi.n	8000a38 <HAL_GPIO_Init+0x50>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d031      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d01c      	beq.n	8000a70 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a36:	e048      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d043      	beq.n	8000ac4 <HAL_GPIO_Init+0xdc>
 8000a3c:	2b11      	cmp	r3, #17
 8000a3e:	d01b      	beq.n	8000a78 <HAL_GPIO_Init+0x90>
          break;
 8000a40:	e043      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a42:	4a89      	ldr	r2, [pc, #548]	; (8000c68 <HAL_GPIO_Init+0x280>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d026      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a48:	4a87      	ldr	r2, [pc, #540]	; (8000c68 <HAL_GPIO_Init+0x280>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d806      	bhi.n	8000a5c <HAL_GPIO_Init+0x74>
 8000a4e:	4a87      	ldr	r2, [pc, #540]	; (8000c6c <HAL_GPIO_Init+0x284>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d020      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a54:	4a86      	ldr	r2, [pc, #536]	; (8000c70 <HAL_GPIO_Init+0x288>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d01d      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
          break;
 8000a5a:	e036      	b.n	8000aca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a5c:	4a85      	ldr	r2, [pc, #532]	; (8000c74 <HAL_GPIO_Init+0x28c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d019      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a62:	4a85      	ldr	r2, [pc, #532]	; (8000c78 <HAL_GPIO_Init+0x290>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d016      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
 8000a68:	4a84      	ldr	r2, [pc, #528]	; (8000c7c <HAL_GPIO_Init+0x294>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xae>
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e028      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e023      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01e      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e019      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e012      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e008      	b.n	8000aca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	2bff      	cmp	r3, #255	; 0xff
 8000ace:	d801      	bhi.n	8000ad4 <HAL_GPIO_Init+0xec>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	e001      	b.n	8000ad8 <HAL_GPIO_Init+0xf0>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	2bff      	cmp	r3, #255	; 0xff
 8000ade:	d802      	bhi.n	8000ae6 <HAL_GPIO_Init+0xfe>
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x104>
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	210f      	movs	r1, #15
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	401a      	ands	r2, r3
 8000afe:	6a39      	ldr	r1, [r7, #32]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	431a      	orrs	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 8096 	beq.w	8000c46 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1a:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a58      	ldr	r2, [pc, #352]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b56      	ldr	r3, [pc, #344]	; (8000c80 <HAL_GPIO_Init+0x298>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b32:	4a54      	ldr	r2, [pc, #336]	; (8000c84 <HAL_GPIO_Init+0x29c>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x19e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4a      	ldr	r2, [pc, #296]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x19a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x196>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x192>
 8000b76:	2303      	movs	r3, #3
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	e004      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_Init+0x1a0>
 8000b86:	2300      	movs	r3, #0
 8000b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8a:	f002 0203 	and.w	r2, r2, #3
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4093      	lsls	r3, r2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b98:	493a      	ldr	r1, [pc, #232]	; (8000c84 <HAL_GPIO_Init+0x29c>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4938      	ldr	r1, [pc, #224]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4933      	ldr	r1, [pc, #204]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	492e      	ldr	r1, [pc, #184]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	604b      	str	r3, [r1, #4]
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	4929      	ldr	r1, [pc, #164]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	608b      	str	r3, [r1, #8]
 8000c0e:	e006      	b.n	8000c1e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	491f      	ldr	r1, [pc, #124]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	491a      	ldr	r1, [pc, #104]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60cb      	str	r3, [r1, #12]
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4915      	ldr	r1, [pc, #84]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	3301      	adds	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f aed0 	bne.w	80009fc <HAL_GPIO_Init+0x14>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	372c      	adds	r7, #44	; 0x2c
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	10120000 	.word	0x10120000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10320000 	.word	0x10320000
 8000c7c:	10220000 	.word	0x10220000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e11f      	b.n	8000eee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d106      	bne.n	8000cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fc96 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2224      	movs	r2, #36	; 0x24
 8000ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d00:	f001 fb5e 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8000d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4a7b      	ldr	r2, [pc, #492]	; (8000ef8 <HAL_I2C_Init+0x25c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d807      	bhi.n	8000d20 <HAL_I2C_Init+0x84>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a7a      	ldr	r2, [pc, #488]	; (8000efc <HAL_I2C_Init+0x260>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bf94      	ite	ls
 8000d18:	2301      	movls	r3, #1
 8000d1a:	2300      	movhi	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	e006      	b.n	8000d2e <HAL_I2C_Init+0x92>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <HAL_I2C_Init+0x264>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf94      	ite	ls
 8000d28:	2301      	movls	r3, #1
 8000d2a:	2300      	movhi	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0db      	b.n	8000eee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4a72      	ldr	r2, [pc, #456]	; (8000f04 <HAL_I2C_Init+0x268>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	0c9b      	lsrs	r3, r3, #18
 8000d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a64      	ldr	r2, [pc, #400]	; (8000ef8 <HAL_I2C_Init+0x25c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d802      	bhi.n	8000d70 <HAL_I2C_Init+0xd4>
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	e009      	b.n	8000d84 <HAL_I2C_Init+0xe8>
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_I2C_Init+0x26c>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	099b      	lsrs	r3, r3, #6
 8000d82:	3301      	adds	r3, #1
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4956      	ldr	r1, [pc, #344]	; (8000ef8 <HAL_I2C_Init+0x25c>)
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d80d      	bhi.n	8000dc0 <HAL_I2C_Init+0x124>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1e59      	subs	r1, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	bf38      	it	cc
 8000dbc:	2304      	movcc	r3, #4
 8000dbe:	e04f      	b.n	8000e60 <HAL_I2C_Init+0x1c4>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d111      	bne.n	8000dec <HAL_I2C_Init+0x150>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6859      	ldr	r1, [r3, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	e012      	b.n	8000e12 <HAL_I2C_Init+0x176>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	0099      	lsls	r1, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_I2C_Init+0x17e>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e022      	b.n	8000e60 <HAL_I2C_Init+0x1c4>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10e      	bne.n	8000e40 <HAL_I2C_Init+0x1a4>
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1e58      	subs	r0, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	440b      	add	r3, r1
 8000e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3e:	e00f      	b.n	8000e60 <HAL_I2C_Init+0x1c4>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	0099      	lsls	r1, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	6809      	ldr	r1, [r1, #0]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69da      	ldr	r2, [r3, #28]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6911      	ldr	r1, [r2, #16]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68d2      	ldr	r2, [r2, #12]
 8000e9a:	4311      	orrs	r1, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	000186a0 	.word	0x000186a0
 8000efc:	001e847f 	.word	0x001e847f
 8000f00:	003d08ff 	.word	0x003d08ff
 8000f04:	431bde83 	.word	0x431bde83
 8000f08:	10624dd3 	.word	0x10624dd3

08000f0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	461a      	mov	r2, r3
 8000f18:	460b      	mov	r3, r1
 8000f1a:	817b      	strh	r3, [r7, #10]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fc52 	bl	80007c8 <HAL_GetTick>
 8000f24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	f040 80e0 	bne.w	80010f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2319      	movs	r3, #25
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4970      	ldr	r1, [pc, #448]	; (8001100 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 fc8c 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e0d3      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_I2C_Master_Transmit+0x50>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e0cc      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d007      	beq.n	8000f82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0201 	orr.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2221      	movs	r2, #33	; 0x21
 8000f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	893a      	ldrh	r2, [r7, #8]
 8000fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fc4:	8979      	ldrh	r1, [r7, #10]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	6a3a      	ldr	r2, [r7, #32]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 faf6 	bl	80015bc <I2C_MasterRequestWrite>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e08d      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ff0:	e066      	b.n	80010c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 fd06 	bl	8001a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00d      	beq.n	800101e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2b04      	cmp	r3, #4
 8001008:	d107      	bne.n	800101a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001018:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e06b      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001038:	b29b      	uxth	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	b29a      	uxth	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001046:	3b01      	subs	r3, #1
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b04      	cmp	r3, #4
 800105a:	d11b      	bne.n	8001094 <HAL_I2C_Master_Transmit+0x188>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	2b00      	cmp	r3, #0
 8001062:	d017      	beq.n	8001094 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800108c:	3b01      	subs	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	6a39      	ldr	r1, [r7, #32]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 fcf6 	bl	8001a8a <I2C_WaitOnBTFFlagUntilTimeout>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00d      	beq.n	80010c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d107      	bne.n	80010bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e01a      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d194      	bne.n	8000ff2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2220      	movs	r2, #32
 80010dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010f4:	2302      	movs	r3, #2
  }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	00100002 	.word	0x00100002
 8001104:	ffff0000 	.word	0xffff0000

08001108 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	461a      	mov	r2, r3
 8001114:	460b      	mov	r3, r1
 8001116:	817b      	strh	r3, [r7, #10]
 8001118:	4613      	mov	r3, r2
 800111a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fb52 	bl	80007c8 <HAL_GetTick>
 8001124:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b20      	cmp	r3, #32
 8001130:	f040 8238 	bne.w	80015a4 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2319      	movs	r3, #25
 800113a:	2201      	movs	r2, #1
 800113c:	497e      	ldr	r1, [pc, #504]	; (8001338 <HAL_I2C_Master_Receive+0x230>)
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 fb8c 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800114a:	2302      	movs	r3, #2
 800114c:	e22b      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_I2C_Master_Receive+0x54>
 8001158:	2302      	movs	r3, #2
 800115a:	e224      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d007      	beq.n	8001182 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2222      	movs	r2, #34	; 0x22
 8001196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2210      	movs	r2, #16
 800119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	893a      	ldrh	r2, [r7, #8]
 80011b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4a5e      	ldr	r2, [pc, #376]	; (800133c <HAL_I2C_Master_Receive+0x234>)
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011c4:	8979      	ldrh	r1, [r7, #10]
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 fa78 	bl	80016c0 <I2C_MasterRequestRead>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1e5      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d113      	bne.n	800120a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e1b9      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	2b01      	cmp	r3, #1
 8001210:	d11d      	bne.n	800124e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001248:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800124a:	b662      	cpsie	i
 800124c:	e197      	b.n	800157e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001252:	2b02      	cmp	r3, #2
 8001254:	d11d      	bne.n	8001292 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001266:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800128e:	b662      	cpsie	i
 8001290:	e175      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80012b8:	e161      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012be:	2b03      	cmp	r3, #3
 80012c0:	f200 811a 	bhi.w	80014f8 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d123      	bne.n	8001314 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fc1b 	bl	8001b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e162      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001312:	e134      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001318:	2b02      	cmp	r3, #2
 800131a:	d150      	bne.n	80013be <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	2200      	movs	r2, #0
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <HAL_I2C_Master_Receive+0x238>)
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fa98 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e137      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
 8001336:	bf00      	nop
 8001338:	00100002 	.word	0x00100002
 800133c:	ffff0000 	.word	0xffff0000
 8001340:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001354:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001372:	3b01      	subs	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001388:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013bc:	e0df      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	2200      	movs	r2, #0
 80013c6:	497a      	ldr	r1, [pc, #488]	; (80015b0 <HAL_I2C_Master_Receive+0x4a8>)
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 fa47 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0e6      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001406:	3b01      	subs	r3, #1
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800141c:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_I2C_Master_Receive+0x4ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_I2C_Master_Receive+0x4b0>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	0a1a      	lsrs	r2, r3, #8
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00da      	lsls	r2, r3, #3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	3b01      	subs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d117      	bne.n	8001472 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f043 0220 	orr.w	r2, r3, #32
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001464:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e099      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b04      	cmp	r3, #4
 800147e:	d1da      	bne.n	8001436 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800148e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014c2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014f6:	e042      	b.n	800157e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fb05 	bl	8001b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e04c      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001528:	3b01      	subs	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b04      	cmp	r3, #4
 800154a:	d118      	bne.n	800157e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f ae99 	bne.w	80012ba <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e000      	b.n	80015a6 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	00010004 	.word	0x00010004
 80015b4:	20000000 	.word	0x20000000
 80015b8:	14f8b589 	.word	0x14f8b589

080015bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	460b      	mov	r3, r1
 80015ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d006      	beq.n	80015e6 <I2C_MasterRequestWrite+0x2a>
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d003      	beq.n	80015e6 <I2C_MasterRequestWrite+0x2a>
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015e4:	d108      	bne.n	80015f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00b      	b.n	8001610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	2b12      	cmp	r3, #18
 80015fe:	d107      	bne.n	8001610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f91d 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00d      	beq.n	8001644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001636:	d103      	bne.n	8001640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e035      	b.n	80016b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800164c:	d108      	bne.n	8001660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	e01b      	b.n	8001698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001660:	897b      	ldrh	r3, [r7, #10]
 8001662:	11db      	asrs	r3, r3, #7
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 0306 	and.w	r3, r3, #6
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f063 030f 	orn	r3, r3, #15
 8001670:	b2da      	uxtb	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <I2C_MasterRequestWrite+0xfc>)
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f943 	bl	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e010      	b.n	80016b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <I2C_MasterRequestWrite+0x100>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f933 	bl	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	00010008 	.word	0x00010008
 80016bc:	00010002 	.word	0x00010002

080016c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d006      	beq.n	80016fa <I2C_MasterRequestRead+0x3a>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d003      	beq.n	80016fa <I2C_MasterRequestRead+0x3a>
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016f8:	d108      	bne.n	800170c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e00b      	b.n	8001724 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	2b11      	cmp	r3, #17
 8001712:	d107      	bne.n	8001724 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f893 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00d      	beq.n	8001758 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174a:	d103      	bne.n	8001754 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e079      	b.n	800184c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001760:	d108      	bne.n	8001774 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001762:	897b      	ldrh	r3, [r7, #10]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	e05f      	b.n	8001834 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001774:	897b      	ldrh	r3, [r7, #10]
 8001776:	11db      	asrs	r3, r3, #7
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f003 0306 	and.w	r3, r3, #6
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f063 030f 	orn	r3, r3, #15
 8001784:	b2da      	uxtb	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4930      	ldr	r1, [pc, #192]	; (8001854 <I2C_MasterRequestRead+0x194>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f8b9 	bl	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e054      	b.n	800184c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4929      	ldr	r1, [pc, #164]	; (8001858 <I2C_MasterRequestRead+0x198>)
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f8a9 	bl	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e044      	b.n	800184c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f831 	bl	800185c <I2C_WaitOnFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d103      	bne.n	8001818 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e017      	b.n	800184c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800181c:	897b      	ldrh	r3, [r7, #10]
 800181e:	11db      	asrs	r3, r3, #7
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0306 	and.w	r3, r3, #6
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f063 030e 	orn	r3, r3, #14
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <I2C_MasterRequestRead+0x198>)
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f865 	bl	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	00010008 	.word	0x00010008
 8001858:	00010002 	.word	0x00010002

0800185c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186c:	e025      	b.n	80018ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d021      	beq.n	80018ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001876:	f7fe ffa7 	bl	80007c8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d302      	bcc.n	800188c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d116      	bne.n	80018ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f043 0220 	orr.w	r2, r3, #32
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e023      	b.n	8001902 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4013      	ands	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	e00c      	b.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4013      	ands	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d0b6      	beq.n	800186e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001918:	e051      	b.n	80019be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d123      	bne.n	8001972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001938:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001942:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f043 0204 	orr.w	r2, r3, #4
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e046      	b.n	8001a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d021      	beq.n	80019be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800197a:	f7fe ff25 	bl	80007c8 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d302      	bcc.n	8001990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d116      	bne.n	80019be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f043 0220 	orr.w	r2, r3, #32
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e020      	b.n	8001a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10c      	bne.n	80019e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	e00b      	b.n	80019fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4013      	ands	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d18d      	bne.n	800191a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a14:	e02d      	b.n	8001a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f8ce 	bl	8001bb8 <I2C_IsAcknowledgeFailed>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e02d      	b.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d021      	beq.n	8001a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2e:	f7fe fecb 	bl	80007c8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d302      	bcc.n	8001a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d116      	bne.n	8001a72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0220 	orr.w	r2, r3, #32
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e007      	b.n	8001a82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d1ca      	bne.n	8001a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a96:	e02d      	b.n	8001af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f88d 	bl	8001bb8 <I2C_IsAcknowledgeFailed>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e02d      	b.n	8001b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aae:	d021      	beq.n	8001af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab0:	f7fe fe8a 	bl	80007c8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d302      	bcc.n	8001ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e007      	b.n	8001b04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d1ca      	bne.n	8001a98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b18:	e042      	b.n	8001ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d119      	bne.n	8001b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0210 	mvn.w	r2, #16
 8001b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e029      	b.n	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5c:	f7fe fe34 	bl	80007c8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d302      	bcc.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e007      	b.n	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d1b5      	bne.n	8001b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bce:	d11b      	bne.n	8001c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0204 	orr.w	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e26c      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8087 	beq.w	8001d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b89      	ldr	r3, [pc, #548]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x12c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d168      	bne.n	8001d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e246      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x76>
 8001c7c:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7f      	ldr	r2, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x98>
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xbc>
 8001cb6:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a71      	ldr	r2, [pc, #452]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a67      	ldr	r2, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fd6a 	bl	80007c8 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7fe fd66 	bl	80007c8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1fa      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe4>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fd56 	bl	80007c8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7fe fd52 	bl	80007c8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1e6      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x10c>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d063      	beq.n	8001e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d11c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d116      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1ba      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4939      	ldr	r1, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	e03a      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe fd0b 	bl	80007c8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe fd07 	bl	80007c8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e19b      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4927      	ldr	r1, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
 8001de8:	e015      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe fcea 	bl	80007c8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7fe fce6 	bl	80007c8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e17a      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03a      	beq.n	8001e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7fe fcca 	bl	80007c8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7fe fcc6 	bl	80007c8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e15a      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f000 fac6 	bl	80023e8 <RCC_Delay>
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7fe fcb0 	bl	80007c8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7fe fcac 	bl	80007c8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e140      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	42420000 	.word	0x42420000
 8001e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b9e      	ldr	r3, [pc, #632]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e9      	bne.n	8001e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a6 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b97      	ldr	r3, [pc, #604]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a93      	ldr	r2, [pc, #588]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b91      	ldr	r3, [pc, #580]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b8e      	ldr	r3, [pc, #568]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b8b      	ldr	r3, [pc, #556]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a8a      	ldr	r2, [pc, #552]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7fe fc6d 	bl	80007c8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7fe fc69 	bl	80007c8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0fd      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b81      	ldr	r3, [pc, #516]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x312>
 8001f18:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a7a      	ldr	r2, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x334>
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a72      	ldr	r2, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x356>
 8001f50:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a6c      	ldr	r2, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a69      	ldr	r2, [pc, #420]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b64      	ldr	r3, [pc, #400]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a63      	ldr	r2, [pc, #396]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fc1d 	bl	80007c8 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fc19 	bl	80007c8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0ab      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x37e>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fc07 	bl	80007c8 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fc03 	bl	80007c8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e095      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8081 	beq.w	80020fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d061      	beq.n	80020cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d146      	bne.n	800209e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe fbd7 	bl	80007c8 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe fbd3 	bl	80007c8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e067      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	492d      	ldr	r1, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a19      	ldr	r1, [r3, #32]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	430b      	orrs	r3, r1
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fba7 	bl	80007c8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7fe fba3 	bl	80007c8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e037      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x46a>
 800209c:	e02f      	b.n	80020fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fb90 	bl	80007c8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fb8c 	bl	80007c8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e020      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x498>
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	42420060 	.word	0x42420060

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e073      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7fe fae0 	bl	80007c8 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe fadc 	bl	80007c8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e053      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d210      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4601      	mov	r1, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1cc>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fa3e 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	080024a8 	.word	0x080024a8
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b490      	push	{r4, r7}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f0:	1d3c      	adds	r4, r7, #4
 80022f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x40>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x46>
 8002326:	e02d      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800232a:	623b      	str	r3, [r7, #32]
      break;
 800232c:	e02d      	b.n	800238a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800233a:	4413      	add	r3, r2
 800233c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002340:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c5b      	lsrs	r3, r3, #17
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800235a:	4413      	add	r3, r2
 800235c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002366:	fb02 f203 	mul.w	r2, r2, r3
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	e004      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	623b      	str	r3, [r7, #32]
      break;
 8002382:	e002      	b.n	800238a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002386:	623b      	str	r3, [r7, #32]
      break;
 8002388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238a:	6a3b      	ldr	r3, [r7, #32]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bc90      	pop	{r4, r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	08002494 	.word	0x08002494
 800239c:	080024a4 	.word	0x080024a4
 80023a0:	40021000 	.word	0x40021000
 80023a4:	007a1200 	.word	0x007a1200
 80023a8:	003d0900 	.word	0x003d0900

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	4601      	mov	r1, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080024b8 	.word	0x080024b8

080023e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <RCC_Delay+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <RCC_Delay+0x38>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002404:	bf00      	nop
  }
  while (Delay --);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	60fa      	str	r2, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f9      	bne.n	8002404 <RCC_Delay+0x1c>
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000000 	.word	0x20000000
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <__libc_init_array>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	2500      	movs	r5, #0
 8002428:	4e0c      	ldr	r6, [pc, #48]	; (800245c <__libc_init_array+0x38>)
 800242a:	4c0d      	ldr	r4, [pc, #52]	; (8002460 <__libc_init_array+0x3c>)
 800242c:	1ba4      	subs	r4, r4, r6
 800242e:	10a4      	asrs	r4, r4, #2
 8002430:	42a5      	cmp	r5, r4
 8002432:	d109      	bne.n	8002448 <__libc_init_array+0x24>
 8002434:	f000 f822 	bl	800247c <_init>
 8002438:	2500      	movs	r5, #0
 800243a:	4e0a      	ldr	r6, [pc, #40]	; (8002464 <__libc_init_array+0x40>)
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <__libc_init_array+0x44>)
 800243e:	1ba4      	subs	r4, r4, r6
 8002440:	10a4      	asrs	r4, r4, #2
 8002442:	42a5      	cmp	r5, r4
 8002444:	d105      	bne.n	8002452 <__libc_init_array+0x2e>
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800244c:	4798      	blx	r3
 800244e:	3501      	adds	r5, #1
 8002450:	e7ee      	b.n	8002430 <__libc_init_array+0xc>
 8002452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002456:	4798      	blx	r3
 8002458:	3501      	adds	r5, #1
 800245a:	e7f2      	b.n	8002442 <__libc_init_array+0x1e>
 800245c:	080024c0 	.word	0x080024c0
 8002460:	080024c0 	.word	0x080024c0
 8002464:	080024c0 	.word	0x080024c0
 8002468:	080024c4 	.word	0x080024c4

0800246c <memset>:
 800246c:	4603      	mov	r3, r0
 800246e:	4402      	add	r2, r0
 8002470:	4293      	cmp	r3, r2
 8002472:	d100      	bne.n	8002476 <memset+0xa>
 8002474:	4770      	bx	lr
 8002476:	f803 1b01 	strb.w	r1, [r3], #1
 800247a:	e7f9      	b.n	8002470 <memset+0x4>

0800247c <_init>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr

08002488 <_fini>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr
